<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>%2F2019%2F09%2F09%2F%E5%88%9D%E7%BA%A7%E4%BC%9A%E8%AE%A1%E5%AE%9E%E8%AE%AD%2F</url>
    <content type="text"><![CDATA[@TOC 初级会计实务实训基本流程图123456789101112131415161718graph LRA[原始凭证] -- 1 --&gt; E[汇总原始凭证]A[原始凭证] -- 2 --&gt; C(收款,付款,转账,记账凭证)B[科目汇总表]C -- 3 --&gt; D[现金,银行存款日记账]B -- 6 --&gt; H[总分类账]E -- 2--&gt; C(收款,付款,转账,记账凭证)E -- 4 --&gt; F[明细分类账]H -- 8 --&gt; G[会计报表]C -- 5 --&gt; B[科目汇总表]E[汇总原始凭证]F[明细分类账]G[会计报表]H[总分类账]H -- 7 --&gt; FF -- 8 --&gt; GF -- 7 --&gt; HC -- 4 --&gt; F 简化流程1.填写凭证2.粘贴原始凭证3.等级所有种类的明细账和所有种类的日记账4.制作T形账户5.编录科目汇总表6.编录总账 具体流程注意事项1.填写凭证 根据原始凭证首先做会计分录，注意会计分录的摘要一般可以在原始凭证上找到业务类型，然后根据业务类型进行分录，注意==一级科目==和==二级科目==要尽量写好，并根据业务类型判断一级和二级科目，借贷平衡。 在做好会计分录的基础上填写会计凭证，依次填写好： 1.时间 2.摘要 3.制单人员名字 4.在右上角填写==记==字第==001==号，如果一笔业务一张凭证写不完可以写==记字第1/2001==和==记字记字第2/2001== 5.根据会计分录填写==科目(总账科目/明细科目)i==和==借贷方金额==和==合计(注意合计数字前加¥)== 6.在借方金额和贷方金额下面没有数据的用斜/标记，防止篡改 ==注意：入库和领用材料不需要会计分录，但需要登记明细账== 2.粘贴原始凭证依次把原始凭证粘贴在记账凭证后并在==会计主管==写上粘贴人的名字==注意：入库和领用材料不需要会计分录，但需要登记明细账并在月末用一次加权平均法计量== 3.登记所有种类的明细账和所有种类的日记账根据记账凭证填写账簿账簿初始化：1.填写账簿启用表，填写单位名称，账簿名称，启用日期，经管人员，单位盖章等2.首次启用需要记录期初余额 4.制作T形账户只需根据凭证填写电子表格即可 实例：总账科目 | 二级科目 | 借方金额 | 贷方金额 | 记账凭证号——– | —– | —– | —– | ——–固定资产 | 机械设备类 | ¥120,000 | ¥0 | 001应交税费 | 应交增值税(进项税) | ¥19,200 | ¥0银行存款 | / |¥0 | ¥139,200 5.编录科目汇总表选中T型账户，直接插入数据透视表即可，也可以利用COUNTIF函数进行求值 6.编录总账根据T型账户进行总账的编录，只需记录一级科目即可，注意借贷方向，借增加，贷减少，余数是正就写借，是负就写贷。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hexo添加网页访问计数功能]]></title>
    <url>%2F2019%2F08%2F25%2FHexo%E6%B7%BB%E5%8A%A0%E7%BD%91%E9%A1%B5%E8%AE%BF%E9%97%AE%E8%AE%A1%E6%95%B0%E5%8A%9F%E8%83%BD%2F</url>
    <content type="text"><![CDATA[Hexo添加网页访问计数功能这是一篇将部署在Github的Hexo静态博客添加网站流量计数的博客。 主题下的网站流量计数系统通常的网站计数系统有百度统计以及谷歌分析等大厂提供的解决方案，但是对于个人搭建的博客而言最初其实倒没有必要去费一番周折。在此推荐由不算子提供的网站计数接口。眼看博客的评论接口已经凉的差不多了，不算子还算比较靠谱的。 在==themes/你的主题文件夹/_config.yml==中添加属性因为网站自带的count容易不显示计数，所以需要在_config.yml中任意添加一行： 123#开启不算子访问统计busuanzi: enable: true ==注意enable:与true之间一定要保留空格，对于所有配置文件都如此== 添加不算子网站访问量统计脚本在themes/你的主题文件夹/layout/_partial/footer.ejs末尾&lt;/footer&gt;与其上面的&lt;/div&gt;之间放入代码： 1234567891011&lt;% if (theme.busuanzi &amp;&amp; theme.busuanzi.enable)&#123; %&gt; &lt;!-- 不蒜子统计 --&gt; &lt;span id="busuanzi_container_site_pv"&gt; 本站总访问量&lt;span id="busuanzi_value_site_pv"&gt;&lt;/span&gt;次 &lt;/span&gt; &lt;span class="post-meta-divider"&gt;|&lt;/span&gt; &lt;span id="busuanzi_container_site_uv" style='display:none'&gt; 本站访客数&lt;span id="busuanzi_value_site_uv"&gt;&lt;/span&gt;人 &lt;/span&gt; &lt;script async src="/busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"&gt;&lt;/script&gt; &lt;% &#125; %&gt; ==由于不算子早期的域名被强制过期，所以网上很多早期的教程的链接已经失效了，需要注意甄别== 在你需要的位置添加访问量根据不同的需求，你看你需要在不同的位置显示你的文章阅读量，此处以在右上角的日期区域添加文章阅读量为例：在themes/yilia/layout/_partial/post/date.ejs 原有代码的开头(不需要把新代码放入原代码块中，而是和原代码独立的两块）加入： 123456 &lt;% if (theme.busuanzi &amp;&amp; theme.busuanzi.enable &amp;&amp; !index)&#123; %&gt; &lt;!-- 不蒜子统计 --&gt; &lt;span id="busuanzi_container_page_pv" style='display:none' class="&lt;%= class_name %&gt;"&gt; &lt;i class="icon-smile icon"&gt;&lt;/i&gt; 阅读数：&lt;span id="busuanzi_value_page_pv"&gt;&lt;/span&gt;次 &lt;/span&gt;&lt;% &#125; %&gt; 这种方法对于同一个人反复访问网站是持续累加的，我想大家也不会拒绝这种lowlow的操作（狗头） 生成以及显示效果在hexo目录上邮件选择Git bash，输入hexo g等待生成完成，再输入hexo d提交代码（也没必要每次都hexo s本地调试一番了），接着刷新你的博客界面，就可以查看结果了。功能显示可能会有一段时间之后才出现，我的当时网站访问量正常工作了，但是文章阅读量十几分钟之后才正常，所以需要一些等待。 个人博客 予安]]></content>
  </entry>
  <entry>
    <title><![CDATA[SQL学习日程笔记]]></title>
    <url>%2F2019%2F08%2F25%2FSQL%E5%AD%A6%E4%B9%A0%E6%97%A5%E7%A8%8B%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[SQL Server Management Studiouse xs_dat gocreate database student2on--定义数据文件(name=student2_data,filename='e:\db\student2_data.mdf',size=5mb,maxsize=30mb,filegrowth=10mb)log on--定义事务日志文件(name=student2_log,filename='e:\db\student2_log.ldf',size=2mb,maxsize=10mb,filegrowth=10%)create database a2logon(name=a2,filename='e:\db\a2.mdf')create database b --新建一个名叫b的数据库on(name=b_data,--设置名字为bfilename='e:\db\b_data.mdf'--存放的文件位置),(name=b1_data,--设置新建的第二个名字为b1filename='e:\db\b1_data.ndf'--存放的位置)log on--新建一个日志文件(name=b2_ldf,--设置名字为b2filename='e:\db\b2_log.ldf'--文件位置)create database Fon(name=f1_data,filename='e:\db\f1_data.mdf',size=5mb,maxsize=50mb,filegrowth=5mb),(name=f2_data,filename='e:\db\f2_data.ndf',size=5mb,maxsize=30mb,filegrowth=20%)log on(name=f3_logfilename='e:\db\f3_log.ldf')drop database a--删除名称为a的数据库（delete仅用于删除小型数据）--创建数据表（操作方式）use studentgo--(切换可用数据库）create table student2(sno char(10) not null,sname char(10) not null,ssex char(2),--不写“not null”就是可以为空sbirthday datetime,sscore numeric(18,0),classno char(8) not null)use LIRSgocreate table class(classno char(8) not null,classname char(16) not null,pno char(4)not null)use LIRSgocreate table teaching(tno char(4),cno char(7))use LIRSgocreate table choice(sno char(10) not null,cno char(7) not null,grade real)-------------------------------------------------------------------------------------------向数据表添加数据insert into class--向class这个表添加数据（use LIRS go注意这个，需要先定义切换的数据库）(classno,classname,pno)values('18203','18级财务3班','0001'),('18204','18级财务4班','0001')------------------------------------------------------------------------------------------删除表格classdelete(仅用于删除小型数据)drop table class(删除class这个table(表))（一般用drop删除）（注意切换数据库）----------------------------------------------------------------------------------------create database A --（这是一个例子，创建一个名称为A的数据库，并向里面添加数据）use Ago --这两行的意思是切换到“A”这个数据库create table 销售记录表 --新建一个“销售记录表(table)”并设定每一列的表头和数据要求(no char(12) not null,name char(100) not null,type char(50) not null,price real,seller char(100) not null,--注意每行后都要加逗号buyer char(100) not null,time datetime not null)insert into 销售记录表--向“销售记录表”这个表中添加数据(no,name,type,price,seller,buyer,time)-- 一一对应下面的关系values('001','白菜','蔬菜','88','楚','18390120306','2019/09/08'),--注意这个逗号('002','香蕉','水果','99','今','18390120399','2019/06/08')-- ------------------------------------------------------------数据完整性，即想方法使数据符合规则,不存在重复的行--DEFUAT默认-- -----------------------------------------------------------以下为修改一个列为主键的代码use studentgo--使用（student）这个数据库alter table student2--选择“student2”这个表格add constraint pk_student2--向“student2”添加主键primary key (sno)--将“sno”这一列为"主键"--.如果将“primary key（主键）”改为“unique（唯一约束）”则为设定‘唯一约束’--（此为行完整性）--列完整性为前设置的（not null）------------------------------------------------------------练习use studentgoalter table professionaladd constraint pk_professionalprimary key (pno)-----------------------------------------------------------------组合主键alter table professionaladd constraint pk_professionalprimary key (pname,pno)---------------------------------------------------------------给teacher表的tsex字段设置默认值为女use studentgoalter table student2add constraint df_ssexdefault '女' for ssex -----------------------------------------------------------------检查约束-为表中能接受的值进行约束(取值范围)--设置教师的性别取值只能为男或女use studentgoalter table student2--选择student2这个表格add constraint ck_stu_ssex--向“student2”中的“ssex”添加条件check(ssex='男' or ssex='女')--设置ssex的条件为只能选择‘男’或‘女’-------------------------------------------------------------------外键约束--foreign key--如何判断A,B表能不能建立外键关系？--1.是否有相同的列--2.该列在其中一个表是单独作为主键--设置该列为另一个表的外键--判断student表和class表能否建立外键关系?可实现--------------------------------------------------------------alter table choice--选择choice这个表格，如果没有，新建一个add constraint fk_stu_choiceforeign key(sno) references student(sno)--设置约束，sno作为sno的外键--练习：判断choice表和course表能否建立外键关系。如果能，建立--2:判断course表和teaching表能否建立外键关系，代码--3：判断teaching表和teacher表能否建立外键关系，代码--4：判断class表和professional表能否建立外键关系，操作--5：判断professional表和 department表能否建立外键关系，代码----------------------------------------------------------------create database A--在数据库中创建表格A1，A1各行要求如下：on(name=A_data,filename='d:\db\A_data.mdf',size=5mb,maxsize=30mb,filegrowth=10mb)log on--定义事务日志文件(name=A_log,filename='d:\db\A_log.ldf',size=2mb,maxsize=10mb,filegrowth=10%)use Agocreate table A1(no int primary key,name char(20) not null,type char(10) check(type='日用品' or type='食品') default '食品',price real check(price&gt;='5'))--use Agocreate table A2(no2 int primary key,x1 char(2) unique,no int references A1(no))------------------------------------------------在数据库A中创建表A3no int --------------------------------------use Agocreate table A3(no int references A1(no),no2 int references A2(no2),primary key(no,no2)--这个表的主键由no,no2共同构成)-----------------------------------------select GETDATE()---------------------------------------------------------use Agocreate database saleson(name=sales_data,filename='d:\db\sales_data.mdf',size=10mb,maxsize=500mb,filegrowth=10%)log on(name=sales_log,filename='d:\db\sales_log.ldf',size=5mb,maxsize=100mb,filegrowth=2mb)---------------------------------------------drop database sales3--删除“sales3”这个数据库----------------------------------------------use sales go ----------------------------create table salers (saleid char(3) primary key,salename varchar(8) not null,sex char(2) check(sex='男' or sex='女') default '男',birthday datetime,hiredate datetime,salary money,department char(30),address char(60),telephone char(13))----------------------------create table product(productid int primary key,productname varchar(100),price Decimal(18,2),stocknumber int,sellnumber int)----------------------------create table customer(customerid int primary key,companyname varchar(100),contactname char(20),phone char(15),address varchar(100),email varchar(50))----------------------------create table orders(orderid int primary key,productid int references product (productid),--与product表的productid外键关联customerid int references customer (customerid),--与customer表的customerid外键关联saleid char(3)references salers (saleid),ordernumber int not null,orderdate datetime default datatime)------------------------------以下是老版本设置内外键关系，适合建立完表之后设置alter table ordersadd constraint productid_fk foreign key (productid) references product (productid)--与product表的productid外键关联alter table ordersadd constraint customerid_fk foreign key (customerid) references customer (customerid)--与customer表的customerid外键关联----------------------------use salesgodrop table customer--如果出现“无法删除对象 'customer'，因为该对象正由一个 FOREIGN KEY 约束引用。”请参考以下解决。-------------------------------------------------------------------------------------------------select fk.name,fk.object_id,OBJECT_NAME(fk.parent_object_id) as referenceTableNamefrom sys.foreign_keys as fkjoin sys.objects as o on fk.referenced_object_id=o.object_idwhere o.name='customer'--此四行代码用于查询单引号内的表格的外键位置------------------ALTER TABLE dbo.orders DROP CONSTRAINT customerid_fk--用于删除存在的外键，以解决不能删除表的问题---------------------------------------------------------------------------------------------------------------------------在A中创建表A3要求如下--no int 参照A1表的no列，是主键--no int 与A2表的no2关联，是主键use agocreate table A3(productid int references product (no),no2 int references A2 (no2),primary key (no,no2))--------------------------------------------------------------------------------------------------insert语句create database studentsuse studentsgocreate table course(cno char(7),cname char(30),credits real)-----------------------------------------------------------------------------------insert语句向表添加数据-------------------------------------------------------------------------insert into course(cno,cname,credits)values('0301001','毛泽东思想概论','3')---------------------------------------------------------------------------------查看是否添加成功select * from course-------------------------------------------------------------------------------insert into coursevalues('0301002','英语','3')--不用加“(cno,cname,credits)”也可以--------------------------------------------------------------------------------insert into course(cno,cname)--如果想要只添加前两行，只要先定义添加那一列，然后对应输入要添加的数据即可values('0301002','英语2')-------------------------------------------------------------------------------------insert into course(cno,cname)--如果想要只添加前两行，只要先定义添加那一列，然后对应输入要添加的数据即可values('0301004','英语3'),('0301005','英语4')----------------------------------------------------------------------------------------create table student(sno char(7),sname char(30),ssex char(5),cno char(7),sscore char(7))-----------------------------------------------------------------------------------insert into student(sno,sname,ssex,cno,sscore)valueS('1','邓','男','18203','500'),('2','江','女','18203',NULL),('3','吴',NULL,'18203',NULL)--如果需要添加空值，直接在相对应的输入NULL即可---------------------------------------------------------create table teacher(tno char(4) not null,tname char(10),tsex char(2),tbirthday datetime,ttitle char(10))---------------------------------------------------------------------insert into teacher(tno,tname,tsex,ttitle)values('1','李','女','讲师'),('2','张',null,'副教授'),('3','王','男',null)---------------------------------------------------------------------insert into teacher(tno,tname)values('4','李珊'),('5','宋小艳')----------------------------------------------------------------------数据更新--修改李珊老师的性别为女use studentsgoupdate teacher set tsex='女'where tname='李珊'--修改宋小艳老师姓名为宋艳update teacher set tname='宋艳'--这是输入修改后的是什么where tname='宋小艳'--这是搜索要修改的是什么--------------------------------------------------------------------select * from teacher--查看teacher这张表---------------------------------------------------------------------update teacher set tname='alex',tsex='男'--这是输入修改后的是什么where tname='宋艳'--这是搜索要修改的是什么，定位到要修改的行---------------------------------------------------------------------delete teacher--选择要删除的表where tname='alex'--定位这张表要删除的行--删除某个表中的特定的行---------------------------------------------------------------------use studentsgoselect * from course------------------------------------------------------------------------------------use mastergouse xs_dat godrop database student----------------------------------------use studentgoselect * from teacher---------------------------------------select * from studentselect sno 学号,sname 姓名,ssex as 性别,入学成绩=sscore--给列赋予一个新的名称 1.sno 学号（空格赋值），2.ssex as 性别(用AS赋予这名称),,3.入学成绩=sscore-------（这种赋值就叫投影操作）from studentgo -----------------------------------------select year('2019-5-16')-2000--------------------------------------------select GETDATE()=---------------------------------------------select year(select GETDATE())-2000-----------------------------------------------select top 3year( GETDATE())-year (sbirthday) 年龄,sname 姓名from student--查询年龄最大的三个人order by year( GETDATE())-year (sbirthday) desc-------------------------------------------------select * --列名1，列明2，选择所有就用*from student--(数据源，如表)order by sbirthday desc--查询年龄最小的排序（desc是降序，asc是升序）--------------------------------------select top 20 percent *from student --成绩在前20%的学生--------------------------------------select top 1 *from studentorder by sscore desc --查询分数最高的人姓名-----------------------------------------------------select top 1 *from studentwhere ssex='男'--（这里放筛选条件）order by sscore desc --查询分数最高的男同学姓名-------------------------------------筛选行用where，，，列用select----------------------------------select distinct sno --distinct表示不显示重复的行from choice --表示查找有选课的学生的学号，查询结果能看出来人数-----------------------------------------------------查找有同学选修的课程的编号，结果中不现实重复值select distinct ------------------------------where 条件字句order by 列名1 asc/desc,列名2 asc/desc--对查询结果做排序，先筛选列名一升序降序排序，然后再根据列明2再次排序--例如筛选一班二班三班，然后学号301~340，340~401，401~440，，这样就可以实现-----------------------------------------------------------------------------select distinct top 1 sname,sscore,classnofrom studentwhere ssex='女' and sscore&gt;'250'order by sscore desc,classno asc-------------------------------------------模糊搜索where 列名 like 条件通配符：%任意多个字符_任意单个字符[]括号内的任意单个字符[^]不在括号内的任意单个字符----------------------------------------select *from studentwhere sname like '陈%'--查询开头和 陈 一样的数据，即陈性学生order by sbirthday desc--然后按照生日降序排序------------------------------------------------------查询07级学生信息select *from studentwhere sno like '07%'--%表示07后面任意字符都可以，即开头为07的数据-------------------------------------------------------------筛选陈性且仅有两个字的学生select *from studentwhere sname like '陈_'-- _表示只是一个字符----------------------------------------------------------------筛选陈性且仅有三个字的学生select *from studentwhere sname like '陈%' and len(sname)=3 --先查询陈性学生，然后用LEN筛选字符串长度为3的姓名 -------------------------------------------------------------------------select *from studentwhere sname like '[张陈]%'--查询姓张或姓陈的学生------------------------------------------------------------select *from studentwhere sname like '[^张陈]%'--查询不姓张也不姓陈的学生 ^select *from studentwhere sname not like '[张陈]%'--反向查询，可以实现，但效率较低（算法不行）----------------------------------------------------------------转义符select *from studentwhere sname like '%30/%%' escape '/' --'/'里面的/可以随便改，锁定/符号后面的一位字符，例如%/%50%/%含义----------------------------------------------------------------------------------------------------------use xs_dat go---------------------------------------------------------1.select *from teacherwhere tsex='女'--2.tname like '张%'select *from teacherwhere --3.select *from teacherwhere tname like '[张王]%' and tsex='女'--4.select *from teacherwhere tname like '[^李张王]%' and ttitle='教授'--5.select *from courseorder by Credits asc--6.select *from coursewhere cname like '%物/流%' escape '/'--7.select *from coursewhere cname like '%[^数/据/库]%' escape '/'--（出错，数据中不存在数据库的行）-------7.select *from coursewhere cname not like '%数据库%'--（正确）--8.select *from studentwhere sscore&gt;'250' and sname like '张%' and len(sname)=3 and sno like '07%' and ssex ='男'--9.select distinct cnofrom choice--10.select *from teacherwhere tname like '%玉%' and ttitle='教授' and year( GETDATE())-year (tbirthday)&gt;'50'--此题筛选结果为空select 列名from 数据源where 条件语句order by 列名 asc/desc，列名2 asc/desc 排序次序的设置--对查询结果做排序，先筛选列名一升序降序排序，然后再根据列明2再次排序--例如筛选一班二班三班，然后学号301~340，340~401，401~440，，这样就可以实现select distinct 列名distinct 查询结果不重复-----------------------------------------------select * from teacherwhere ttitle----------------------------------------use xs_datgo--‘+’号叫字符串连接符select * from studentwhere classno='07010111' or classno = '07010211'--查询班级号是'07010111'或者'07010211'的信息select Ltrim(sname)+ltrim(str(year(sbirthday)))+'年'+ltrim(str(month(sbirthday)))+'月'+ltrim(str(day(sbirthday)))+'日'from studentwhere classno='07010111' or classno = '07010211'select Ltrim(sname)+ltrim(str(year(sbirthday)))+'年'+ltrim(str(month(sbirthday)))+'月'+ltrim(str(day(sbirthday)))+'日'from studentwhere classno='07010111' or classno = '07010211'--ltrim作用就是去除查询出结果的时候去除左边的空白--trim作用就是去除查询出结果的时候去除右边的空白select SUBSTRING('jeourr[u[eu',2,5)--从第二个开始数，数5位显示结果select * from student where SUBSTRING(sname,2,1)='小'select DATEDIFF(day,'2000-8-9','2019-5-23')--前面减去后，datediff这个函数---------------------------------------------------------------------除count(*)函数外，聚合函数都会忽略Null值，聚合函数不能出现在where语句中--select 聚合函数--from(表名)--where(条件)--查询指定条件的数据的行数--查找姓名为两个字的人的总人数select count(*) 姓名为两个字人数--count和excel的函数相同，即输出符合条件的人的人数from studentwhere len(sname)=2--或者select count(*) 姓名为两个字人数--这四个字只是给输出的结果表头赋值from studentwhere sname like '__'-------------------------------------select count(distinct ttitle)职称种类--这四个字只是给输出的结果表头赋值from teacher--从teacher表中的ttitle查看有几种职称（类型）--distinct指的是不重复的-----------------------------------------select count(sno)--查询student中有多少个学号from student-------------------------------------------------select count(*)--查询student中有多少个学生from student------------------------------------------------select count(sbirthday)--查询student中有多少个生日信息不为空的数量from student------------------------------------------------------------------------------select max(sscore) 最高分,min(sscore) 最低分,avg(sscore) 平均分from student--查询student表里面的sscore最高/低/平均分是多少----------------------------------------------------------------select cno 课程编号,max(grade) 最高分,min(grade) 最低分,avg(grade) 平均分from choicegroup by cno------------------------------------------------------------select sum(sscore)--查询什么，前面可以加条件，例如sum相加--此为查询所有分数加一起from student--从哪里查询where sname like'王%'--查询条件----------------------------------------------------------SELECT sno AS 学号,COUNT(*) AS 选择的课程门数--提取sno和所有的课程行数（可重复）FROM choice--从choice表里面提取GROUP BY sno--按照sno进行分组，比如sno0001有十行，且后面的对应都不同，即0001对应十，则0001选了10门课HAVING COUNT(*)&gt;=4--此为一个同学选了多少门课-----------------------------------------------------------------------------------------------------------------------------------------------------------------------SELECT student.sname 姓名,choice.sno 学号,COUNT(*) AS 选择的课程门数--提取sno和所有的课程行数（可重复）FROM choice join student on student.sno=choice.sno--从choice表里面提取GROUP BY sname,choice.sno--按照sno和sname进行分组，比如sno0001有十行，且后面的对应都不同，即0001对应十，则0001选了10门课HAVING COUNT(*)&gt;=4--此为一个同学选了多少门课------------------------------------------------------------------------------------------------------------------------------------------------------------------SELECT cno AS 学科号,COUNT(*) AS 选此课的人数--提取cno和所有的学科号行数（可重复）FROM choice--从choice表里面提取GROUP BY cno--HAVING COUNT(*)&gt;=4--此为一个课多少人选--------------------------------------------------------------------------select classno 班级编号,count(*) 班级人数from studentgroup by classno--分列班级编号和班级人数，按照班级编号分组-------------------------------------------------------select count(distinct classno) 班级数量from student--查询总有多少班级--———————————————————————————select count(ttitle) 职称,tsex 性别from teachergroup by tsex--统计有职称的老师男女分开-----------------------------------------------------------查询又在上课的教师的人数select count(tno) 正在上课教师人数from teaching --tno有多少种---------------------------------------------------------select count(distinct cno) 被学生选修的课程数--被学生选修的有几门课from choice---------------------------------------------------------select count(distinct sno) 有几个学生选修课程from choice---------------------------------------------------------select sno,max(grade) 最高分,min(grade) 最低分,avg(grade) 平均分from choice group by sno--查询所有选修课程学生的学号和所选课程的最高分最低分平均分---------------------------------------------------------select cno,max(grade) 最高分,min(grade) 最低分,avg(grade) 平均分from choice group by cno--查询所有选修课程和这个课程在所有同学中的最高分最低分平均分------------------------------------------------------------select max(grade)最高分,min(grade)最低分,avg(grade)平均分from choicewhere cno=0101001--选择课程号为0101001的课程最高分最低分平均分-----------------------------------------------------------select cno 课程名,max(grade) 最高分,min(grade) 最低分,avg(grade) 平均分from choice group by cnohaving cno='0101001'--选择课程号为0101001的课程最高分最低分平均分--此性能低---------------------------------------------------------------select max(grade)最高分,min(grade)最低分,avg(grade)平均分from course inner join choice--inner可以省略 on course.cno=choice.cnowhere cname='illustrator平面设计'--检索illustrator平面设计 这门课的最高分最低分平均分---------------------------------------------------------------select grade 成绩,cno 课程名from student inner join choice--inner可以省略 on student.sno=choice.snowhere sname='张进'--张进选择的课程和成绩---------------------------------------------------------select grade 成绩,cno 课程名from student join choice on student.sno=choice.snowhere sname='张进'--张进选择的课程和成绩---------------------------------------------------------------内连接：inner join (inner 可以省略)--外连接：left join 左外连接 right join 右外连接 full join 全外连接--交叉连接 cross join----------------------------------------------------------select *from studentwhere sname='张进'--------------------------------------------------------select classname 课程名from student join class on student.classno=class.classnowhere sname='张进'--张进选择的课程的名字------------------------------------------select pname 所在专业名称from student join class on student.classno=class.classno join professional on professional.pno=class.pnowhere sname='张进'---------------------------------------------select pname 所在系名称from student join class on student.classno=class.classno join professional on professional.pno=class.pno join department on professional.deptno=department.deptnowhere sname='张进'--------------------------------------------------select * from student inner join choice on student.sno=choice.sno--查询有选课的学生信息--查询所有同学的选课情况，包括有选课的和没选课的select * from student left join choice on student.sno=choice.sno--左右互换之后就可以实现仅使用left join实现所有查询select * from choice left join studenton student.sno=choice.sno-------------------------------------------------------select * from student left join choice --left表示用左边的on student.sno=choice.sno--联结两个表where choice.sno is null--查询另一个表为空数据的学生，即查询没有选课的同学的相关信息--查询没有选课的同学的相关信息--------------------------------------------------------------------------------------------select * from choice left join courseon course.cno=choice.cnoselect * from course left join choiceon course.cno=choice.cno---------------------------------------------------------------------------------------select * from course left join choiceon course.cno=choice.cnowhere choice.sno is null--查询没人选修的课程信息select * from course left join choiceon course.cno=choice.cnowhere choice.sno is not null--或者select * from course inner join choiceon course.cno=choice.cno--查询有人选修的课程信息--------------------------------------------------------select * from teacher left join teachingon teacher.tno=teaching.tno--查询所有教授的授课情况，包括有课的和没课的select * from teacher left join teachingon teacher.tno=teaching.tnowhere cno is null--查询没课的教授情况select count(*) 没课的教授人数from teacher left join teachingon teacher.tno=teaching.tnowhere cno is null--查询没课的教授人数--------------------------------------------------select * from teacher full join teachingon teacher.tno=teaching.tnoselect * from course full join choiceon course.cno=choice.cnouse xs_datgoSelect count(*) 班级人数,class.classno 班级号,classname 班级名,class.pno 专业号,pname 专业名,professional.deptno 部门号,deptname 部门名--选中所有要查询的列From class join professionalon class.pno=professional.pno join departmenton professional.deptno=department.deptno join studenton class.classno=student.classno--合并这三张表组成数据源group by class.classno ,classname,class.pno,professional.pno,professional.pname,professional.deptno,deptname--开始进行分组，注意这些列都是一一对应且唯一的，并且都要输进去（一般错误为加入性别类有限不唯一值）order by count(student.classno) asc--根据人数升序排列SELECT student.classno 班级编号,COUNT(*) 学生人数,classname 班级名--列出需要查询的各项FROM student join classon class.classno=student.classno--合并两张表作为数据源GROUP BY student.classno,classname--按照classno和classname分组 这些列都是一一对应且唯一的（classno等同于classname，但是两个都要写在group by后面，不能只写一个）HAVING COUNT(*)&gt;=10 --group by后面用having写条件Select tname 姓名,year( GETDATE())-year (tbirthday) 年龄From teacherSelect tname 姓名,tbirthday 出生日期From teacherwhere tname like '[王刘胡]%'select *from studentwhere sname like '%丽%'select top 1year( GETDATE())-year (tbirthday) 年龄,tname 姓名from teacher--查询年龄最小的三个人order by year( GETDATE())-year (tbirthday) ascselect top 1 --只保留排序的第一行数据sno 学号,grade 成绩,cname 课程名称 --列出要查询的from choice join courseon choice.cno=course.cno --合并这两张表格where cname='java程序设计' --定位'java程序设计'order by grade desc --按照降序排序select sname 学生姓名,sbirthday 出生日期,sscore 入学成绩,class.classname 班级名from student join classon student.classno=class.classnowhere classname='计应0711'select student.sno 学生学号,grade 成绩,class.classname 班级名,sname 学生姓名,cno 课程号from student join classon student.classno=class.classnojoin choice on student.sno=choice.snowhere classname='计应0711'select sname 学生姓名,ssex 性别,deptname 所在系名from student join class on student.classno=class.classnojoin professionalon class.pno=professional.pnojoin department on professional.deptno=department.deptno --合并这四张表作为数据源where deptname='计算机工程系'select grade 课程成绩,sname 姓名,cname 课程名from choice join student on choice.sno=student.snojoin course on choice.cno=course.cno --联结三张表作为数据源where sname='张进' and cname='java程序设计'--两个条件用and连接select student.sno,sname,ssex,sbirthdayfrom student join choice on student.sno=choice.snoselect *from student left join choice on student.sno=choice.snowhere cno is nullselect student.sno 学号,sname 姓名,ssex 性别,sbirthday 生日from student left join choice --保留所有左侧student表的行，主左边联结on student.sno=choice.sno --联结两个表格作为数据源where cno is null --查询联结后的表choice表无数据的信息，即没有修课的学生的信息select *from teacher left join teaching --保留左侧teacher表所有行on teacher.tno=teaching.tnoleft join course --同上，保留左侧on teaching.cno=course.cno --联结三个表where cname is null --查询联结后的表course表无cname数据的信息，即没有课的教师的信息select tname 教师姓名,ttitle 教师职称from teacher left join teaching --保留左侧teacher表所有行on teacher.tno=teaching.tnoleft join course --同上，保留左侧on teaching.cno=course.cno --联结三个表where cname is null --查询联结后的表course表无cname数据的信息，即没有课的教师的信息select tname 教师姓名,cname 课程名from teacher join teaching on teacher.tno=teaching.tnojoin course on teaching.cno=course.cno --联结三个表where cname='java程序设计' --查询所有教授了“java程序设计”的老师姓名select *from student join choiceon student.sno=choice.sno join courseon choice.cno=course.cnowhere cname='java程序设计'select sname 姓名,cname 课程名from student join choiceon student.sno=choice.sno join courseon choice.cno=course.cnowhere cname='java程序设计'select tname 教张进的老师姓名from student left join choiceon student.sno=choice.sno left join courseon choice.cno=course.cnoleft join teaching on course.cno=teaching.cnoleft join teacheron teaching.tno=teacher.tno--五张表全部左联结where sname='张进'select class.classno 班级号,classname 班级名 ,pno 专业号from class left join studenton class.classno=student.classnowhere sno is null --此题结果为空，可以添加一个班级验证select count(*) 计算机工程系的女生人数From class join professionalon class.pno=professional.pno join departmenton professional.deptno=department.deptno join studenton class.classno=student.classno--合并这三张表组成数据源where deptname='计算机工程系' and ssex='女'select sum(sscore) 计应0711班入学成绩的总分from class join studenton class.classno=student.classno where classname='计应0711'select *from student join choiceon student.sno=choice.snoselect sname 姓名,sum(grade)/count(grade) 平均成绩--相除和excel相同from student join choiceon student.sno=choice.sno--联结这两个表格group by sname --依据名字进行分组select cname 课程名,sum(grade)/count(grade) 平均成绩--相除和excel相同from student join choiceon student.sno=choice.snojoin courseon choice.cno=course.cno--联结这三个表格group by cname --依据课程名字进行分组select classname 班级名,cname 课程名,sum(grade)/count(grade) 平均成绩 --相除和excel相同from class right join student --右联结保留student表的所有列on student.classno=class.classno left join choice --左联结保留student表的所有列on student.sno=choice.snoleft join course--左联结同上on choice.cno=course.cno--联结这几个表格--使用左联结可以显示所有班级，包括没有选课的group by classname,cname --依据课程名字进行分组order by sum(grade)/count(grade) descselect tname 教师姓名,count(cname)此教师教授的课程门数from teacher left join teaching on teacher.tno=teaching.tnoleft join course on teaching.cno=course.cno --联结三个表，全部用左联结，确保保留teacher表所有行数group by tnameselect *from teacher left join teaching on teacher.tno=teaching.tnoleft join course on teaching.cno=course.cno --联结三个表order by tnamegroup by tname--14.select tname 教师姓名,ttitle 教师职称from teacher left join teaching --保留左侧teacher表所有行on teacher.tno=teaching.tnoleft join course --同上，保留左侧on teaching.cno=course.cno --联结三个表where cname is null --查询联结后的表course表无cname数据的信息，即没有课的教师的信息--7.select top 1year( GETDATE())-year (tbirthday) 年龄,tname 姓名,tbirthday 出生日期from teacherorder by year( GETDATE())-year (tbirthday) asc--查询年龄最小的人--19.select count(*) 计算机工程系的女生人数From class join professionalon class.pno=professional.pno join departmenton professional.deptno=department.deptno join studenton class.classno=student.classno--合并这三张表组成数据源where deptname='计算机工程系' and ssex='女'select *from teacher left join teaching --保留左侧teacher表所有行on teacher.tno=teaching.tnoleft join course --同上，保留左侧on teaching.cno=course.cno --联结三个表--19.select *From class join professionalon class.pno=professional.pno join departmenton professional.deptno=department.deptno join studenton class.classno=student.classno--合并这三张表组成数据源where deptname='计算机工程系' and ssex='女'--20.select sum(sscore) 计应0711班入学成绩的总分from class join studenton class.classno=student.classno where classname='计应0711'--23.select classname 班级名,cname 课程名,sum(grade)/count(grade) 平均成绩 --相除和excel相同from class right join student --右联结保留student表的所有列on student.classno=class.classno left join choice --左联结保留student表的所有列on student.sno=choice.snoleft join course--左联结同上on choice.cno=course.cno--联结这几个表格--使用左联结可以显示所有班级，包括没有选课的group by classname,cname --依据课程名字进行分组order by sum(grade)/count(grade) desc--23.select *from class right join student --右联结保留student表的所有列on student.classno=class.classno left join choice --左联结保留student表的所有列on student.sno=choice.snoleft join course--左联结同上on choice.cno=course.cno--联结这几个表格--使用左联结可以显示所有班级，包括没有选课的group by classname,cname --依据课程名字进行分组order by sum(grade)/count(grade) desc--10.select student.sno 学生学号,grade 成绩,class.classname 班级名,sname 学生姓名,cno 课程号from student join classon student.classno=class.classnojoin choice on student.sno=choice.snowhere classname='计应0711'--6.Select count(*) 班级人数,class.classno 班级号,classname 班级名,class.pno 专业号,pname 专业名,professional.deptno 部门号,deptname 部门名--选中所有要查询的列From class join professionalon class.pno=professional.pno join departmenton professional.deptno=department.deptno join studenton class.classno=student.classno--合并这三张表组成数据源group by class.classno ,classname,class.pno,professional.pno,professional.pname,professional.deptno,deptname--开始进行分组，注意这些列都是一一对应且唯一的，--并且都要输进去（一般错误为加入性别类有限不唯一值）order by count(student.classno) asc--根据人数升序排列select tno,tname,tsex,tbirthday,ttitlefrom teacherselect top 1 sno 学号,cname 课程号,grade 成绩from choice inner join courseon choice.cno=course.cnowhere cname='java程序设计'order by grade desc select tname 姓名 ,cname 课程名from teacher inner join teachingon teacher.tno=teaching.tnoinner join course on teaching.cno=course.cnowhere cname='java程序设计'--嵌套查询（子查询）where 条件（select from where）--update 表名setwhere (select from)\---delect 表名where （select from）--insert into 表名 select from where (select from)select classnofrom studentwhere sname='张进'--查询和 张进 同伴的雪上信息select *from studentwhere classno=(select classnofrom studentwhere sname='张进')select *from studentwhere ssex=(select ssexfrom studentwhere sname='张进')--查询和张进同性别的学生信息---------------------------------------------查询比“06010111”班学生入学成绩都高的其他班的学生学号和姓名select *from studentwhere sscore&gt;(select max(sscore)from studentwhere classno='06010111')----------------------------------------------查询比“06010111”班某个学生入学成绩高的其他班的学生学号和姓名select *from studentwhere sscore&gt;(select min(sscore)from studentwhere classno='06010111') and classno not like '06010111'--最后这个不等于可以写成&lt;&gt;或者classno！='0601011'---------------------------------------------------------1.查询选修了课程编号为“0102001”的课程，并且成绩高于该课程平均分的学生的学号select sno from choicewhere cno='0102001' and grade&gt;(select avg(grade)from student left join choiceon student.sno=choice.snowhere cno='0102001')----------------------------------------------------------2.select *from studentwhere sscore&gt;(select min(sscore)from studentwhere classno='06010111') and classno not like '06010111'--最后这个不等于可以写成&lt;&gt;或者classno！='0601011'-----------------------------------------------------3.--查询成绩都高于学生张进的最低分的学生的姓名，课程名和成绩select sname,cname,gradefrom student join choice on student.sno=choice.sno join course on choice.cno=course.cnowhere grade&gt;(select min(grade)from student join choice on student.sno=choice.sno join course on choice.cno=course.cnowhere sname='张进')--4.select sname,cname,gradefrom student join choice on student.sno=choice.sno join course on choice.cno=course.cnowhere grade&gt;(select max(grade)from student join choice on student.sno=choice.sno join course on choice.cno=course.cnowhere sname='张进')--或者select sname,cname,gradefrom student join choice on student.sno=choice.sno join course on choice.cno=course.cnowhere grade&gt;all(select gradefrom student join choice on student.sno=choice.sno join course on choice.cno=course.cnowhere sname='张进')-----查询选修课考试不及格的学生的学号和姓名--用嵌套查询select sno,snamefrom studentwhere sno (select sno from choice where grade&lt;'60')-------------------------------------------------------------select classnamefrom classwhere classno in(select classnofrom student where sname='张进')---查询张进所在的班级名称------------------------------------------------------3.select tname 姓名,tsex 性别,ttitle 职称from teacherwhere tno in(select tnofrom teachingwhere cno in(select cnofrom choicewhere sno in(select snofrom studentwhere classno in(select classnofrom classwhere pno in(select pnofrom professionalwhere deptno in(select deptnofrom departmentwhere deptname='计算机工程系'))))))--1.Select tnameFrom teacherWhere ttitle=(select ttitle --定位ttitleFrom teacherWhere tname='范君召')--查询范昭君的职称--2.select grade 张进JAVA程序设计的成绩from student left join choiceon student.sno=choice.sno left join course on choice.cno=course.cnowhere sname='张进' and cname='JAVA程序设计'--3.select classname 计算机工程系的所有班级名称from class left join professional on class.pno=professional.pno left join department on professional.deptno=department.deptno where deptname='计算机工程系'--4.select cnamefrom coursewhere Credits&gt;(select max(Credits)from course where cname='微机原理' or cname='艺术设计基础')--5.select sname 比张进孙晓年龄都大的学生的姓名from studentwhere sbirthday&lt;(select min(sbirthday) --注意不能用年份比较年龄,防止同年生比较from studentwhere sname='张进' or sname='孙晓')--6.select *from student join class on student.classno=class.classnojoin professionalon class.pno=professional.pnojoin department on professional.deptno=department.deptno --联结表格where deptname='计算机工程系' or deptname='外语系'--筛选条件--7.select max(grade) 最高成绩from choice join courseon choice.cno=course.cnowhere cname='JAVA程序设计'--8.update choice --选择要修改的表set grade='60' --输入修改后的是什么where sno=(select snofrom studentwhere sname='孙晓') --定位要修改的行and grade&lt;60 ---完整补充条件--9.delete choice --选择要删除的表where sno=(select snofrom studentwhere sname='孙晓') --定位这张表要删除的行and grade&lt;60 --完整补充条件--参考delete teacher--选择要删除的表where tname='alex'--定位这张表要删除的行--删除某个表中的特定的行--10.delete teacher--选择要删除的表where teacher.tno=(select teacher.tnofrom teacher left join teachingon teaching.tno=teacher.tnowhere cno is null)--定位这张表要删除的行--11.delete teacherwhere tno in (select tno from teaching where cno in (select cno from coursewhere cno in (select cno from choicewhere sno in (select sno from studentwhere classno in (select classno from classwhere pno in (select pno from professionalwhere deptno in (select deptno from departmentwhere deptname='外语系'))))))) --多多重重嵌套--12.select tname 姓名,tsex 性别from teacher unionselect sname 姓名,ssex 性别from student --使用union注意：1.所有查询中的列数和列的顺序必须相同 2.数据类型必须兼容啊--13.select *from teacher where teacher.tno &lt;&gt; (select tno -- &lt;&gt; 表示不等于from teaching join courseon teaching.cno=course.cnowhere cname='JAVA程序设计') --筛选“JAVA程序设计”课程对应的所有教师编号-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------期末测试EXAM测试---------------------------------------------------------------------------------------------------------------------------------use examgoselect * from student----------------------------------------------------------------------------------------------------------------------------------1. 提供方便的用户操作页面不属于SQL语言功能2. 每个数据库有且只有一个主要数据文件3. sql server主数据文件的拓展名是mdf4. 创建数据库时不能定义的是 文件结构5. 设置教师基本工资取值范围 A和B都可以6. right join 表示 右外连接7. 数据库管理系统 属于 系统软件8. 最适合年龄（整数）列的类型是 int9. 在t-sql语句中 修改表结构用的语句是 update10. money数据类型属于货币型11.用于限制列的取值不重复的约束是 unique 12.外码和所引用的主码名字可以不同，但语义必须相同13.sql server次要数据文件的拓展名是 ndf14.取出关系中的某些列并消除重复元组的运算称为 投影运算15.系统提供了一个存储过程可以用来修改表的名称，这个过程是 sp_rename （sp_rename 修改表名 列名 或 用户定义数据类型）16.variant 不是sql server的基本数据类型17.日志文件后缀名是 .ldf18.创建数据库原命令是 create database19.sql server 2012 安装过程中可以指定身份认证模式，安装完成后还可以修改20.sql server日志文件的拓展名是 ldf1)余知行的总成绩select sum(grade)from scores inner join studenton ao/gS ,SN0=student SNOwhere sname=余知行select sum(grade)from scoreswhere sno in (select sno from student where sname='余知行)2)07级学生有多少人select *from studentwhere sno like 7%3)物流管理08104的学生人数select distinct snofrom studentwhere classno in (select classno from classes where classno=物流管理08104)4)姓王，并且学生人数只有两个字的学生人数select *from studentwhere sname like'王!5)有多少门课程的选修人数大于100select COUNT(*)from scoresgroup by coursehaving count(*)&gt;1006)SCORES表中一共记录了多少位学生的选课记录61077)陈雅的学号select snofrom studentwhere sname=陈雅’8)英语强化06102的平均成绩select avg(grade)from scoreswhere sno in (select sno from student wherecla ssno in(select classno from scores whereclassno=英语强化06102))9)商务07101班大学英语成绩的最高分是select max(grade)from scoreswhere course='大学英语’and sno in ( select sno from student where classno in (select clas实验四：简单数据查询【实验目的】（1） 掌握行的查询、列的查询（2） 掌握模糊查询（3） 掌握利用字符串函数、日期时间函数进行查询（4） 掌握利用聚合函数进行查询（5） 掌握利用视图进行查询【实验内 容】1、 以下练习请在我们平时上课使用的student数据库中完成：1）查询出全体教师的教师号、姓名、性别和出生日期等信息。--1.Select tno 教师号,tname 姓名,tsex 性别,tbirthday 出生日期From teacher2）查询出学生人数大于等于10人的班级信息，显示班级编号、班级名称、学生人数。--2.SELECT student.classno 班级编号,COUNT(*) 学生人数,classname 班级名称--列出需要查询的各项FROM student join class--合并两张表作为数据源on class.classno=student.classnoGROUP BY student.classno,classname--按照classno和classname分组（classno等同于classname，但是两个都要写在group by后面，不能只写一个）HAVING COUNT(*)&gt;=10 --group by后面用having写条件3）查询出全体教师的姓名和年龄信息，并将结果集的列标题改为中文名。--3.Select tname 姓名,year( GETDATE())-year (tbirthday) 年龄From teacher4）查询出姓“王”姓“刘”姓“胡”老师的姓名及出生日期。--4.Select tname 姓名,tbirthday 出生日期From teacherwhere tname like '[王刘胡]%'5）查询出姓名中有”丽”字的所有学生信息。--5.select *from studentwhere sname like '%丽%'6）查询所有班级信息,按班级人数排升序。--6.Select count(*) 班级人数,class.classno 班级号,classname 班级名,class.pno 专业号,pname 专业名,professional.deptno 部门号,deptname 部门名--选中所有要查询的列From class join professionalon class.pno=professional.pno join departmenton professional.deptno=department.deptno join studenton class.classno=student.classno--合并这三张表组成数据源group by class.classno ,classname,class.pno,professional.pno,professional.pname,professional.deptno,deptname--开始进行分组，注意这些列都是一一对应且唯一的，并且都要输进去（一般错误为加入性别类有限不唯一值）order by count(student.classno) asc--根据人数升序排列7）查询出出生日期最大（即年龄最小）的老师姓名及出生日期。--7.select top 1tname 姓名,tbirthday 出生日期from teacherorder by tbirthday desc--查询年龄最小的人8）查询出“java程序设计”课程成绩最高的学号及其成绩。--8.select top 1 --只保留排序的第一行数据sno 学号,grade 成绩,cname 课程名称 --列出要查询的from choice join courseon choice.cno=course.cno --合并这两张表格where cname='java程序设计' --定位'java程序设计'order by grade desc --按照降序排序9）查询出“计应0711”班的学生姓名、出生日期和入学成绩。--9.select sname 学生姓名,sbirthday 出生日期,sscore 入学成绩,class.classname 班级名from student join classon student.classno=class.classnowhere classname='计应0711'10）查询出“计应0711”班所有学生的学号及考试成绩。--10.select student.sno 学生学号,grade 成绩,class.classname 班级名,sname 学生姓名,cno 课程号from student join classon student.classno=class.classnojoin choice on student.sno=choice.snowhere classname='计应0711'11）查询出计算机工程系的所有学生姓名，性别。--11.select sname 学生姓名,ssex 性别,deptname 所在系名from student join class on student.classno=class.classnojoin professionalon class.pno=professional.pnojoin department on professional.deptno=department.deptno --合并这四张表作为数据源where deptname='计算机工程系'12）查询张进的“java程序设计”课程的成绩。--12.select grade 课程成绩,sname 姓名,cname 课程名from choice join student on choice.sno=student.snojoin course on choice.cno=course.cno --联结三张表作为数据源where sname='张进' and cname='java程序设计'--两个条件用and连接13）查询出没有修课的学生的学号、姓名、性别和出生日期。--13.select student.sno 学号,sname 姓名,ssex 性别,sbirthday 生日from student left join choice --保留所有左侧student表的行，主左边联结on student.sno=choice.sno --联结两个表格作为数据源where cno is null --查询联结后的表choice表无数据的信息，即没有修课的学生的信息14）查询没有上课的教师姓名。--14.select tname 教师姓名,ttitle 教师职称from teacher left join teaching --保留左侧teacher表所有行on teacher.tno=teaching.tnoleft join course --同上，保留左侧on teaching.cno=course.cno --联结三个表where course.cno is null --查询联结后的表course表无cno数据的信息，即没有课的教师的信息15）查询所有学习了“java程序设计”的学生姓名。--15.select sname 姓名,cname 课程名from student join choiceon student.sno=choice.sno join courseon choice.cno=course.cnowhere cname='java程序设计'16）查询所有教授了“java程序设计”的老师姓名--16.select tname 教师姓名,cname 课程名from teacher join teaching on teacher.tno=teaching.tnojoin course on teaching.cno=course.cno --联结三个表where cname='java程序设计' --查询所有教授了“java程序设计”的老师姓名17）查询张进的所有授课老师姓名。--17.select tname 教张进的老师姓名from student left join choiceon student.sno=choice.sno left join courseon choice.cno=course.cnoleft join teaching on course.cno=teaching.cnoleft join teacheron teaching.tno=teacher.tno--五张表全部左联结,即保留student表所有行数where sname='张进'18）查询所有没有学生的班级信息。--18.select class.classno 班级号,classname 班级名 ,pno 专业号from class left join studenton class.classno=student.classnowhere sno is null --此题结果为空，可以添加一个班级验证19）统计“计算机工程系”的女生人数。--19.select count(*) 计算机工程系的女生人数From class join professionalon class.pno=professional.pno join departmenton professional.deptno=department.deptno join studenton class.classno=student.classno--合并这三张表组成数据源where deptname='计算机工程系' and ssex='女'20）统计“计应0711”班入学成绩的总分。--20.select sum(sscore) 计应0711班入学成绩的总分from class join studenton class.classno=student.classno where classname='计应0711'21）统计每一个学生的平均成绩。--21.select sname 姓名,avg(grade) 平均成绩 --平均数avgfrom student join choiceon student.sno=choice.sno--联结这两个表格group by sname --依据名字进行分组22）统计每一门课程的平均成绩。--22.select cname 课程名,avg(grade) 平均成--平均数—avgfrom student join choiceon student.sno=choice.snojoin courseon choice.cno=course.cno--联结这三个表格group by cname --依据课程名字进行分组（课程名唯一，如不唯一，则改为cno，保证唯一性）23）统计每一个班、每一门课的平均成绩。--23.select classname 班级名,cname 课程名,avg(grade) 平均成绩 --avg是平均数from class right join student --右联结保留student表的所有列on student.classno=class.classno left join choice --左联结保留student表的所有列on student.sno=choice.snoleft join course--左联结同上on choice.cno=course.cno--联结这几个表格，确保保留了student表的所有列，包括没有选课的group by classname,cname --依据每一个班、每一门课进行分组order by avg(grade) desc --常规排序24）统计每一个教师的授课门数--24.select tname 教师姓名,count(cname)此教师教授的课程门数from teacher left join teaching on teacher.tno=teaching.tnoleft join course on teaching.cno=course.cno --联结三个表，全部用左联结，确保保留teacher表所有行数group by tno --！避免使用姓名分组，以免出现重复姓名查询失误实验五：高级数据查询【实验目的】（1） 掌握连接查询（2） 掌握嵌套查询【实验内容】1、以下练习请在我们平时上课使用的student数据库中完成：1）查询与范君召同职称的教师姓名。--1.Select tnameFrom teacherWhere ttitle=(select ttitle --定位ttitleFrom teacherWhere tname='范君召')--查询范昭君的职称2）查询张进”JAVA程序设计”的成绩。--2.select grade 张进JAVA程序设计的成绩from student left join choiceon student.sno=choice.sno left join course on choice.cno=course.cnowhere sname='张进' and cname='JAVA程序设计'3）查询计算机工程系的所有班级名称。--3.select classname 计算机工程系的所有班级名称from class left join professional on class.pno=professional.pno left join department on professional.deptno=department.deptno where deptname='计算机工程系'4）查询比'艺术设计基础','微机原理'学分都高的课程。--4.select cnamefrom coursewhere Credits&gt;(select max(Credits)from course where cname='微机原理' or cname='艺术设计基础')5）查询比张进,孙晓年龄都大的学生的姓名。--5.select sname 比张进孙晓年龄都大的学生的姓名from studentwhere sbirthday&lt;(select min(sbirthday) --注意不能用年份比较年龄,防止同年生比较from studentwhere sname='张进' or sname='孙晓')6）查询计算机工程系与外语系的所有学生。--6.select *from student join class on student.classno=class.classnojoin professionalon class.pno=professional.pnojoin department on professional.deptno=department.deptno --联结表格where deptname='计算机工程系' or deptname='外语系'--筛选条件7）查询' JAVA程序设计'的最高成绩。--7.select max(grade) 最高成绩from choice join courseon choice.cno=course.cnowhere cname='JAVA程序设计'8）将孙晓的所有不及格的成绩改为60分。--8.update choice --选择要修改的表set grade='60' --输入修改后的是什么where sno=(select snofrom studentwhere sname='孙晓') --定位要修改的行and grade&lt;60 ---完整补充条件9）删除孙晓的不及格的成绩信息。--9.delete choice --选择要删除的表where sno=(select snofrom studentwhere sname='孙晓') --定位这张表要删除的行and grade&lt;60 --完整补充条件10）删除所有没上课的教师。--10.delete teacher--选择要删除的表where teacher.tno=(select teacher.tnofrom teacher left join teachingon teaching.tno=teacher.tnowhere cno is null)--定位这张表要删除的行11）删除外语系的所有老师信息。--11.delete teacherwhere tno in (select tno from teaching where cno in (select cno from coursewhere cno in (select cno from choicewhere sno in (select sno from studentwhere classno in (select classno from classwhere pno in (select pno from professionalwhere deptno in (select deptno from departmentwhere deptname='外语系'))))))) --多多重重嵌套12）查询所有学生与老师的性名与性别,将结果合并为一个。--12.select tname 姓名,tsex 性别from teacher unionselect sname 姓名,ssex 性别from student --使用union注意：1.所有查询中的列数和列的顺序必须相同 2.数据类型必须兼容啊13）查询所有没有教授” JAVA程序设计”的教师姓名。--13.select *from teacher where teacher.tno &lt;&gt; (select tno -- &lt;&gt; 表示不等于from teaching join courseon teaching.cno=course.cnowhere cname='JAVA程序设计') --筛选“JAVA程序设计”课程对应的所有教师编号--新建数据表与插入数据---------------------------------------------------------------------------------------第一题------------------------------------------------------------------------------use salesgoinsert salers(saleid,salename,sex,birthday,hiredate,salary,department,address,telephone)values('06','刘政','男','2000/06/25','2017/08/09','456','行政','安徽省','13013121910')---------------------------------------------------------------------------------------第二题------------------------------------------------------------------------------------insert product(productid,productname,price,stocknumber,sellnumber)values('003','香蕉','12','6765','8976')---------------------------------------------------------------------------------------第三题---------------------------------------------------------------------------------------insert salers(saleid,salename,sex,birthday,hiredate,salary,department,address,telephone)values('10','张三','男','1999/06/25','2017/02/09','496','销售','湖南省','13078121910')--先向salers表添加一个张三的数据update salersset sex='女'where salename='张三'---------------------------------------------------------------------------------------第四题-------------------------------------------------------------------------------------delete from salerswhereyear(birthday)='1986'---------------------------------------------------------------------------------------创建表！！----------------------------------------------use sales go ----------------------------create table salers (saleid char(3) primary key,salename varchar(8) not null,sex char(2) check(sex='男' or sex='女') default '男',birthday datetime,hiredate datetime,salary money,department char(30),address char(60),telephone char(13))----------------------------create table product(productid int primary key,productname varchar(100),price Decimal(18,2),stocknumber int,sellnumber int)----------------------------create table customer(customerid int primary key,companyname varchar(100),contactname char(20),phone char(15),address varchar(100),email varchar(50))----------------------------create table orders(orderid int primary key,productid int references product (productid),--与product表的productid外键关联customerid int references customer (customerid),--与customer表的customerid外键关联saleid char(3) references sallers (saleid),--与salers表的销售员编号saleid外键关联ordernumber int not null,orderdate datetime default datatime) 7、表的删除：使用drop语句删除customer表(代码完成)----------------------------use salesgodrop table customer-------------------------------------------------------------------------如果出现“无法删除对象 'customer'，因为该对象正由一个 FOREIGN KEY 约束引用。”用以下方式解决。----------------------------------------------------------------------------select fk.name,fk.object_id,OBJECT_NAME(fk.parent_object_id) as referenceTableNamefrom sys.foreign_keys as fkjoin sys.objects as o on fk.referenced_object_id=o.object_idwhere o.name='customer'--此四行代码用于查询单引号内的表格的外键位置----------------------------------------------------------------------------ALTER TABLE dbo.orders DROP CONSTRAINT customerid_fk--用于删除存在的外键，以解决不能删除customer表的问题]]></content>
  </entry>
  <entry>
    <title><![CDATA[绿茶养成指南]]></title>
    <url>%2F2019%2F06%2F18%2F%E7%BB%BF%E8%8C%B6%E5%85%BB%E6%88%90%E6%8C%87%E5%8D%97%2F</url>
    <content type="text"><![CDATA[注意，这是一份经典的绿茶养成指南。“如果你想掌握一个男人的命运，那就让他喜欢上你吧。” ——沃·兹基·硕德 “如果你想玩弄一个男人的命运，那就在上一条的基础上，不要喜欢上他。” ——海释·沃·兹基·硕德 如果你对一个男生恨之入骨，想要耽误他的一生，想要让他自我怀疑，想要让他的人生灰暗，最干脆的办法，就是先让他喜欢上你，然后你不要喜欢他。 首先，你要吸引到他，让他对你产生感觉，给他一些诱导性的暗示，让他感受到你或许对他有意思，在逐渐接触的时候，不拒绝也不主动，让他觉得和你有戏。 这个时候，他开始为了接触你，总是会有意无意的多找一些话题和你尬聊，我知道你感觉很无聊，但是别忘了，我们的目的是毁掉他又不是学相声，反正你本来也是无聊，不如先和他逢场作戏一下，让他误以为自己口吐莲花妙语连珠，给他一点自信。 但是光是聊天不够的，你要给他一点机会上钩，你要让他为你做点事情，小到帮你取个东西，大到帮你敲定一些对你很重要的事情。 这个时候，你要表现出来你不是一个寄生虫，你要做人家心中的女神，怎么可以才刚开始就暴露你榨取价值的意图呢？所以，你要给他一些回馈，展示出来你的感激，进一步让他自豪和骄傲。 但是记住，我们只需要展示出来情感上的感激就好，钓凯子砸一分一厘都是傻白甜，这种费成本的事情我们才不做。你只需要在事成之后，用你最崇拜的眼光和最嗲的声音，表达你对他无尽的感激之情，表示他真是帮了你大忙，以后有机会一定要好好报答他。 有机会，又不是一定会，且等着吧，你看着心里窃喜的他，冷笑着想。 这个时候，他捕捉到了信息，也感觉到了你对他的崇拜，如果你有几分姿色或者是有着傻白甜的属性buff，他这个呆头鹅很快就会走进你的陷阱。异性的崇拜和青睐，没有几个人能躲得过去。 呵，男人。 接下来，你要给他不断增加自信的机会，欲擒故纵的让他误以为自己真的是你的盖世英雄，让生活费都不够用的男生觉得自己愿意为你承包鱼塘，让信用卡都快还不起的小白领觉得自己可以给你摘下天上的月亮。 当一个“弱女子”吧，哪怕你能单手拎水桶，也要故意表现出瓶盖都不会开；哪怕你学富五车，也要故意被他蹩脚的笑话逗笑；就算你老谋深算，你也要在他讲述他们五人间办公室中的职场风雨时当一个瑟瑟发抖的小白兔。 然后不断地让他帮忙，不断地表示你的崇拜和谢意，诱导他一步步付出，但是从来不给他一丢丢干货的回馈。 什么？你担心他感觉到不对，意识到你是在榨取他的价值？ 太简单了，来，轻咬一下你的嘴唇，幅度不要太大的晃晃你的小脑袋，然后用一种犹豫不决的语调，一字不差的重复一遍这句话： “你对我太好了，可是我没有什么能为你做的啊，我是不是接受你太多的好了？” 记住，我没让你拒绝，你说这句话的样子，一定要口是心非，一定要想要但是不敢接，装出一个懂事到让人心疼的小姑娘的样子。 **男人这种虚伪的大猪蹄子，明明想要你以身相许，但是这个时候都会一瞬间比玛利亚还圣母，在你的引导下说出那句将他们引入万丈深渊的魔咒： “我为你做什么都是心甘情愿的。”** Bingo！这句话一出，这个男生基本可以送到重症监护室了。 但是你的目的不止于此，还记得吗？你是要毁了他，又不是让他当一个长期饭票，有点格局成吗？来，现在跟着我，一步步给他打棺材。 虽然他这么说了，他也的确愚蠢，但是你要懂得他又不是智障，他总想在你身上得到点什么，接下来，他可能就要频繁的和你互动，约你出去玩，请你吃饭，带你参加各种活动。 来来来，我知道你不喜欢他，但是做戏做全套，你得陪他把这场戏演足了。 虽然手不给拉，肩不给搂，人不给上，但是你要让他周围所有人都觉得：你们是一对，板上钉钉的一对。 失望之前的每一分希望，都是安放最后死去念想棺材上的一个钉子。 时间久了，他坐不住了，他终于有一天开口和你表白了，这一刻，他已经进入了折磨的圈套里。 来，记住这个养备胎专用模板，到时候原封不动的套在他身上： 1.你对我真的很好，而且我也觉得你这个人不错 2.但是我经历过一段刻骨铭心的感情，给我带来了很大的伤害，我到现在还没有摆脱那个阴影 3.请你给我一些时间，好吗？ 你说那个刻骨铭心的感情是啥？哎哟我的小姑奶奶你怎么这么不开窍呢？你想接下来怎么调教他，那个刻骨铭心的感情就是怎么凉的呗。 你想让他给你花钱，那你的前任就是个葛朗台；你想让他给你鞍前马后的当仆人，那你的前任就是个大男子主义；你想让他为你断绝和其他异性的联系，那你的前任就是一个花花大少….. 他接下来为了让你走出阴影所作的每一步，都是和你那个所谓的前任反着来，你的前任也就这时候用一用了。别说，还挺好使。 可以，到了这一步，他已经会无怨无悔的继续被你压榨价值，而且心甘情愿的相信了你的空头支票，跑不掉了。付出自己的价值，因为被你绑定拒绝和其他人的可能，每天朝思暮想全身心投入只为等一个永远不可能兑现的诺言……我觉得可以给他装棺材了，反正他都已经自掘坟墓了。 下一步，给他埋了吧。 你去找一个你能够拿下的男生，和他在一起，然后可劲的秀恩爱，可劲的撒狗粮，怎么甜的腻歪怎么来。 他会来质问你的，小男生经不起这个打击，相信我。 这个时候，你可以彻底摧毁他了，因为接下来你会让他在人生中第一次自我怀疑。 记住，你要表现出犹豫，纠结，难过，用一种被迫的语气为难的说道： “可能，我们真的不合适吧……” 然后，一点一点的否定他身上的所有价值，diss他之前的所有信念，但是都要借着“我不是说你不好，只是我不合适罢了……” 被一个女生赋予希望再夺走的痛苦，会让一个男生完全丧失理智，无情的否定和鄙视自己，虽然至始至终一切因你而起，但是在他的世界里，一切都是他不够好。都是他的错。** 他会为了把你抢回来，去做一切颠覆自己原有观念的事，这个时候你当然不能表现的太势利，你要轻轻捧起他的脸，柔声细语的对他说： “别傻了，我不值得你这么做。” 成了，最后一步已经完成，这个男生已经走火入魔了。 他将长时间处在心爱之人被人夺走的痛苦中，活在自我否定的悔恨中，生存在求之不得的煎熬中，摸爬滚打在本不适合他的歧途中。** 这样下去，不用多久，只要没人点醒他，这件事可能会成长为他心中永远的一个刺，带偏他的很多观念的和行为。 这才是你对于不喜欢的人最残忍的手段，这才是一个红颜祸水应有的手腕。 给希望再夺走，榨取价值不回馈，让他自我怀疑，自我否定，让他不理智和冲动，最后，让他被你的引导彻底带偏。 阿弥陀佛，善哉善哉。 写在最后： 这篇文章的目的，是希望帮助被渣女玩弄的单纯无知小男生/小女生，早点认清事实，早点脱离苦海。 知乎@宏桑]]></content>
  </entry>
  <entry>
    <title><![CDATA[已识乾坤大，犹怜草木青。]]></title>
    <url>%2F2019%2F06%2F14%2F%E5%B7%B2%E8%AF%86%E4%B9%BE%E5%9D%A4%E5%A4%A7%EF%BC%8C%E7%8A%B9%E6%80%9C%E8%8D%89%E6%9C%A8%E9%9D%92%E3%80%82%2F</url>
    <content type="text"><![CDATA[如何成为更好的人？文@灿照 答案：放弃你自己。 首先放弃容貌。 不刻意打扮，不追逐新潮，不买AJ，不逛淘宝，走在人群里吸引不到更多的目光，普通得如同放进新闻直播里一闪而过的背景人潮。这时，相较于其他人类你少掉近一半的欲望，你的金钱和时间得到了翻倍的充裕。在此之前，你每天大概花三个小时跟同学讨论最新款。 然后放弃社交。 挤不进的圈子就不要挤，四个人以上组成的团体就不要加入，看起来很酷的事情也不要做，口口声声让你成为更好的人的胁迫请厉声拒绝，以爱为名的否定请不要接受。这时，相较于其他人类你少掉了近一半的破事儿，你情绪和时间的效率得到了翻倍的增长。比如A和B同时邀请你参加聚会，而你哪个都不想辜负，比如所在团体邀你周末蹦迪，而你只想看一本漫画书。在此之前，你常常为于己无用的选择而两难，甚至对另一方在情感上产生亏欠。 接下来，放弃幻觉。 你也许会忘记童年时期挂在树上没有取的风筝，但你不会忘记当时取之不得的焦灼，此后每次有你珍惜之物从手中溜走的时候，你都会想起来那一只风筝带来的疼痛。那是幻觉。人终究会因年少之不可得之物困其一生，是因为幻觉使人一而再再而三地回到年少，除了疼痛，什么也不会给你带来。错过的感情就不要念念不忘了，失之交臂的缘分没有回响。这时，相较于其他人类你少掉了近一半的胡思乱想。你的精力得到更有效地集中，着眼于当下的你更能抓住机会而不制造新的遗憾。 最后放弃自己。 知乎的一些题目下的回答会告诉你什么价位的鞋子便宜又好看，什么样的口红衬你皮肤的颜色，什么样的乐器简单易学，什么样的书本可以让你拓展见识丰富学识，能给你怎样的精神愉悦和自在独行。 走在大街上一看，每个人都像你。 又换一种穿着，换一种妆容，走上街还是如此。不妨放弃你自以为的高雅，去做一些常人看起来很俗气的事情。或者放弃你的洁净，去接触无家可归的人和动物，端详他们浑浊的眼睛。不妨放弃世俗的认可，从根本上否定它的存在。这不是叫你视潮流如狗屁、唾世俗若粪土，而是视之无物，放弃其差别。你有朝气，一腔书生狂狷，特立独行。可在虽千万人吾往矣之前，你是千万人之一。在虽千万人吾往矣之后，你是千万人。 你想要成为的那一种所谓更好的人，不是标新立异，不是另辟蹊径，不是走别人没有走过的路，不是吃螃蟹和蜘蛛。 而是已识乾坤大，犹怜草木青。 原文：知乎@灿照]]></content>
  </entry>
</search>
